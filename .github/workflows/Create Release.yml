name: Create Release

on:
  pull_request:
    types: 
      - closed
      
env:
  DOCKER_REPO: "ovak"
  IMAGE_NAME: "flaskapp"

jobs:
  get-release-tag:
    if: github.event.pull_request.base.ref == 'master' && github.event.pull_request.merged == true
    
    runs-on:
      - ubuntu-latest

    outputs:
      release-version: ${{ steps.rc_version.outputs.RC_VERSION }}
    
    steps:
      - name: Checkout Main Branch
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.pull_request.base.ref }}
        
      - name: Get Latest Release Tag
        uses: actions-ecosystem/action-get-latest-tag@v1
        id: get-latest-tag
          
      - name: Get rc_version From VERSION
        run: echo "RC_VERSION=$(jq -e -r .rc_version VERSION)" >> $GITHUB_OUTPUT
        id: rc_version

  create-release:
    runs-on:
      - ubuntu-latest
    
    needs:
      - get-release-tag
      
    steps:
      - name: Checkout Main Branch
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.pull_request.base.ref }}
        
      - name: Release Tag
        uses: igorrs/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GIT_TOKEN }}
        with:
          tag_name: ${{ needs.get-release-tag.outputs.release-version }}
          release_name: ${{ needs.get-release-tag.outputs.release-version }}
          prerelease: false

  build-and-push-docker-image:
    runs-on:
      - ubuntu-latest
      
    needs: 
      - get-release-tag
      - create-release
    
    steps:
      - name: Checkout Main Branch
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.pull_request.base.ref }} 
             
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Get Latest Release Tag
        uses: actions-ecosystem/action-get-latest-tag@v1
        id: get-latest-tag

      - name: Build, tag, and push image to DockerHub
        run: |
          docker build -t $DOCKER_REPO/$IMAGE_NAME:${{ steps.get-latest-tag.outputs.tag }} .
          docker push $DOCKER_REPO/$IMAGE_NAME:${{ steps.get-latest-tag.outputs.tag }}
